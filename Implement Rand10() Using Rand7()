Given a function rand7 which generates a uniform random integer in the range 1 to 7, write a function rand10 which generates a uniform random integer in the range 1 to 10.

Do NOT use system's Math.random().

 

Example 1:

Input: 1
Output: [7]
Example 2:

Input: 2
Output: [8,4]
Example 3:

Input: 3
Output: [8,1,10]
 

Note:

rand7 is predefined.
Each testcase has one argument: n, the number of times that rand10 is called.
 

Follow up:

What is the expected value for the number of calls to rand7() function?
Could you minimize the number of calls to rand7()?

//cpp my solution (not good solution due to too many calls to rand7())
class Solution {
public:
    int rand10() {
        return (rand7()+rand7()+rand7()+rand7()+rand7()+rand7())%10+1;
    }
};

//cpp not my solution

class Solution {
public:
    int rand10() {
        int val;
        do{
            int row = rand7();
            int col = rand7();
            val = (row-1)*7+col;
        }while(val>40);
        
        return val%10==0?10:val%10;
    }
};
