Given a binary tree, return the vertical order traversal of its nodes values.

For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

Running a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

Return an list of non-empty reports in order of X coordinate.  Every report will have a list of values of nodes.

 

Example 1:



Input: [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation: 
Without loss of generality, we can assume the root node is at position (0, 0):
Then, the node with value 9 occurs at position (-1, -1);
The nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);
The node with value 20 occurs at position (1, -1);
The node with value 7 occurs at position (2, -2).
Example 2:



Input: [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation: 
The node with value 5 and the node with value 6 have the same position according to the given scheme.
However, in the report "[1,5,6]", the node value of 5 comes first since 5 is smaller than 6.
 

Note:

The tree will have between 1 and 1000 nodes.
Each node's value will be between 0 and 1000.


//cpp solution (my solution)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        map<int,vector<pair<int,int>>> mp;
        
        //bfs
        vector<TreeNode*> stk;
        vector<pair<int,int>> cord;
        stk.push_back(root);
        cord.push_back(make_pair(0,0));
        
        while(!stk.empty()){
            vector<TreeNode*> tmp;
            vector<pair<int,int>> cord_tmp;
            
            for(int i=0;i<stk.size();i++){
                if(stk[i]->left != NULL){
                    
                    int x = cord[i].first-1;
                    int y = cord[i].second-1;
                    
                    tmp.push_back(stk[i]->left);
                    cord_tmp.push_back(make_pair(x,y));
                }
                if(stk[i]->right != NULL){
                    
                    int x = cord[i].first+1;
                    int y = cord[i].second-1;
                    
                    tmp.push_back(stk[i]->right);
                    
                    cord_tmp.push_back(make_pair(x,y));
                }
                
                if(mp.find(cord[i].first)!=mp.end()){
                    mp.at(cord[i].first).push_back(make_pair(stk[i]->val,cord[i].second));
                }else{
                    mp.insert({cord[i].first,vector<pair<int,int>>(1,make_pair(stk[i]->val,cord[i].second))});
                }
            }
            
            stk = tmp;
            cord = cord_tmp;
        }
        
        for(auto v:mp){
            vector<pair<int,int>> vc = vector<pair<int,int>>(v.second);
            
            sort(vc.begin(), vc.end(), [](auto &left, auto &right) {
                if(left.second == right.second)
                    return left.first < right.first;
                return left.second>right.second;
            });
            
            vector<int> once;
            for(auto k:vc){
                once.push_back(k.first);
            }
            ans.push_back(once);
        }
        
        return ans;
    }
};


//cleaner code

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    struct point{
        TreeNode* node;
        int x;
        int y;
    };
public:
    
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        map<int,vector<pair<int,int>>> mp;
        
        //bfs
        vector<point> stk;
        stk.push_back({root,0,0});
        
        while(!stk.empty()){
            vector<point> tmp;
            
            for(int i=0;i<stk.size();i++){
                
                if(stk[i].node->left != NULL){
                    
                    int x = stk[i].x-1;
                    int y = stk[i].y-1;
                    
                    tmp.push_back({stk[i].node->left,x,y});
                }
                
                if(stk[i].node->right != NULL){
                    
                    int x = stk[i].x+1;
                    int y = stk[i].y-1;
                    
                    tmp.push_back({stk[i].node->right,x,y});
                }
                
                if(mp.find(stk[i].x)!=mp.end())
                    mp.at(stk[i].x).push_back(make_pair(stk[i].node->val,stk[i].y));
                else
                    mp.insert({stk[i].x,vector<pair<int,int>>(1,{stk[i].node->val,stk[i].y})});
                
            }
            
            stk = tmp;
        }
        
        return makeAns(mp);
    }
    
    vector<vector<int>> makeAns(map<int,vector<pair<int,int>>> &mp){
        vector<vector<int>> ans;
        for(auto v:mp){
            vector<pair<int,int>> vc = vector<pair<int,int>>(v.second);
            
            sort(vc.begin(), vc.end(), [](auto &left, auto &right) {
                if(left.second == right.second)
                    return left.first < right.first;
                return left.second>right.second;
            });
            
            vector<int> once;
            for(auto k:vc){
                once.push_back(k.first);
            }
            ans.push_back(once);
        }
        
        return ans;
    }
};
