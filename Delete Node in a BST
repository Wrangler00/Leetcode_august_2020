Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
Note: Time complexity should be O(height of tree).

//cpp Not my solution
//Though this is a standard solution (from geeks for geeks)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* minValueNode(TreeNode* node){
        TreeNode *pNode = node;
        while(pNode && pNode->left != NULL)
            pNode = pNode->left;
        
        return pNode;
    }
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL)    return root;
        
        if(key<root->val)   root->left = deleteNode(root->left,key);
        else if(key>root->val)   root->right = deleteNode(root->right,key);
        else {
            if(root->left == NULL){
                TreeNode *tmp = root->right;
                delete root;
                return tmp;
            }
            
            if(root->right == NULL){
                TreeNode *tmp = root->left;
                delete root;
                return tmp;
            }
            
            TreeNode *tmp = minValueNode(root->right);
            root->val = tmp->val;
            
            root->right = deleteNode(root->right,tmp->val);
        }
        return root;
    }
};
