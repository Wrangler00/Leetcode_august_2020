Implement the StreamChecker class as follows:

StreamChecker(words): Constructor, init the data structure with the given words.
query(letter): returns true if and only if for some k >= 1, the last k characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.
 

Example:

StreamChecker streamChecker = new StreamChecker(["cd","f","kl"]); // init the dictionary.
streamChecker.query('a');          // return false
streamChecker.query('b');          // return false
streamChecker.query('c');          // return false
streamChecker.query('d');          // return true, because 'cd' is in the wordlist
streamChecker.query('e');          // return false
streamChecker.query('f');          // return true, because 'f' is in the wordlist
streamChecker.query('g');          // return false
streamChecker.query('h');          // return false
streamChecker.query('i');          // return false
streamChecker.query('j');          // return false
streamChecker.query('k');          // return false
streamChecker.query('l');          // return true, because 'kl' is in the wordlist
 

Note:

1 <= words.length <= 2000
1 <= words[i].length <= 2000
Words will only consist of lowercase English letters.
Queries will only consist of lowercase English letters.
The number of queries is at most 40000.



//cpp my solution

class Trie_node{
public:
    vector<Trie_node *> next;
    bool end;
    Trie_node()
    {
        next = std::vector<Trie_node *>(26,NULL);
        end = false;
    }
};

class Trie
{
    vector<Trie_node*> store;
public:
    Trie_node *root;
    Trie()
    {
        root = new Trie_node();
        store.push_back(root);
    }

    /** Inserts a word into the trie. */
    void insert(string &word) {
        Trie_node *node = root;
        for(char c : word)
        {
            if(node ->next[c - 'a'] == NULL)
                node ->next[c - 'a'] = new Trie_node();
            node = node ->next[c - 'a'];
        }
        node->end = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string &word) {
        Trie_node *node = root;
        for(char c : word)
        {
            if(node ->next[c - 'a'] == NULL)
                return false;
            node = node ->next[c - 'a'];
        }
        return (node->end == true);
    }
    
    bool streamSearch(char c){
        bool isThere = false;
        vector<Trie_node*> tmp;
        tmp.push_back(root);
        
        for(auto pNode : store){
            if(pNode ->next[c-'a'] != NULL){
                tmp.push_back(pNode ->next[c-'a']);
                if(pNode->next[c-'a']->end == true)
                    isThere = true;
            }
        }
        
        store = tmp;
        
        return isThere;
    }
};

class StreamChecker {
    Trie *T;
public:
    StreamChecker(vector<string>& words) {
        T = new Trie();
        for(auto w:words){
            T->insert(w);
        }
    }
    
    bool query(char letter) {
        return T->streamSearch(letter);
    }
};

/**
 * Your StreamChecker object will be instantiated and called as such:
 * StreamChecker* obj = new StreamChecker(words);
 * bool param_1 = obj->query(letter);
 */
