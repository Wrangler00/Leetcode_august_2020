In a given grid, each cell can have one of three values:

the value 0 representing an empty cell;
the value 1 representing a fresh orange;
the value 2 representing a rotten orange.
Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:



Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Note:

1 <= grid.length <= 10
1 <= grid[0].length <= 10
grid[i][j] is only 0, 1, or 2.


//cpp my solution

class Solution {
public:
    int orangesRotting(vector<vector<int>>& g) {
        int rows = g.size();
        int colm = g[0].size();
        
        int min=0,fresh=0;
        vector<pair<int,int>> rott;
        
        for(int i=0;i<rows;i++){
            for(int j=0;j<colm;j++){
                if(g[i][j]==1)
                    ++fresh;
                else if(g[i][j]==2){
                    rott.push_back(make_pair(i,j));
                }
            }
        }
        
        if(fresh == 0)
            return min;
        
        while(fresh && !rott.empty()){
            vector<pair<int,int>> tmp;
            
            for(int i=0;i<rott.size();i++){
                int x = rott[i].first;
                int y = rott[i].second;
                
                if(x>0 && g[x-1][y] == 1){
                    g[x-1][y] = 2;
                    --fresh;
                    tmp.push_back(make_pair(x-1,y));
                }
                if(y>0 && g[x][y-1] == 1){
                    g[x][y-1] = 2;
                    --fresh;
                    tmp.push_back(make_pair(x,y-1));
                }
                if(x<rows-1 && g[x+1][y] == 1){
                    g[x+1][y] = 2;
                    --fresh;
                    tmp.push_back(make_pair(x+1,y));
                }
                if(y<colm-1 && g[x][y+1] == 1){
                    g[x][y+1] = 2;
                    --fresh;
                    tmp.push_back(make_pair(x,y+1));
                }
            }
            
            ++min;
            rott = tmp;
        }
        
        if(fresh)
            return -1;
        
        return min;
    }
};
