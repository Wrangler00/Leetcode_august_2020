Design an Iterator class, which has:

A constructor that takes a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.
A function next() that returns the next combination of length combinationLength in lexicographical order.
A function hasNext() that returns True if and only if there exists a next combination.
 

Example:

CombinationIterator iterator = new CombinationIterator("abc", 2); // creates the iterator.

iterator.next(); // returns "ab"
iterator.hasNext(); // returns true
iterator.next(); // returns "ac"
iterator.hasNext(); // returns true
iterator.next(); // returns "bc"
iterator.hasNext(); // returns false
 

Constraints:

1 <= combinationLength <= characters.length <= 15
There will be at most 10^4 function calls per test.
It's guaranteed that all calls of the function next are valid.

//cpp not my solution

set<string>GenaretallComb(string s,int len){
    int mask = 1<<s.length();
    set<string>hold;
    string comString = "";
    for(int no=1;no<mask;no++){
        int num = no,i = 0;
        while(num){
            if(num&1)comString = comString + s[i];
            i++,num>>=1;
        }
        if(comString.length()==len)hold.insert(comString);
        comString = "";
    }
    return hold;
}

class CombinationIterator {
public:
    set<string>st;
    set <string> :: iterator cur;
    CombinationIterator(string characters, int combinationLength) {
        this->st = GenaretallComb(characters,combinationLength);
        this->cur = begin(st);
    }
    
    string next() {
        return !(cur==end(st))?*cur++:"";
    }
    
    bool hasNext() {
        return !(cur==end(st));
    }
};


//partailly my solution

class CombinationIterator {
    int set_size;
    vector<string> vc;
    int curr=0;
public:
    void precompute(string st,int cl){
        int sz = st.length();
        int lim = pow(2,sz);
        
        for(int i=1;i<lim;i++){
            int num = i,pos=0,count=0;
            string make="";
            while(num){
                if(num&1)
                    make=make+st[pos];
                num = num>>1;
                pos++;
            }
            if(make.length() == cl)
                vc.push_back(make);
        }
        
        if(vc.size()>0)
            sort(vc.begin(),vc.end());
    }
    
    CombinationIterator(string characters, int combinationLength) {
        set_size=characters.length();
        precompute(characters,combinationLength);
    }
    
    string next() {
        return vc[curr++];
    }
    
    bool hasNext() {
        return curr < vc.size();
    }
};

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);
 * string param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
